{% include 'header' %}

import UIKit
import Swinject
import SwinjectStoryboard

@UIApplicationMain
final class AppDelegate: UIResponder {
    
    // MARK: - Public variables
    
    var window: UIWindow?
    
    // MARK: - Private variables
    
    private var assembler: Assembler!
    
    @objc private lazy var appDelegates: [UIApplicationDelegate] = {
        return [
            self.assembler.resolver.resolve(LaunchAppDelegate.self)!
        ]
    }()
    
    // MARK: - Init functions
    
    override init() {
        super.init()
        
        Container.loggingFunction = nil
        
        setupInjection()
    }
    
    // MARK: - Private functions
    
    private func setupInjection() {
        assembler = Assembler([
            CoreComponentsAssembly(),
            AppDelegateAssembly(),
            ApiServiceAssembly()
        ], container: SwinjectStoryboard.defaultContainer)
    }
    
}

// MARK: - UIApplicationDelegate

extension AppDelegate: UIApplicationDelegate {
    
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {
        for appDelegate in appDelegates {
            if appDelegate.responds(to: #selector(application(_:didFinishLaunchingWithOptions:))) {
                _ = appDelegate.application!(application, didFinishLaunchingWithOptions: launchOptions)
            }
        }
        return true
    }
    
}
